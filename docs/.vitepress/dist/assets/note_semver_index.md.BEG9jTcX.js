import{_ as a,c as o,a2 as l,o as i}from"./chunks/framework.DX8ksQZH.js";const p=JSON.parse('{"title":"语义化版本","description":"","frontmatter":{"title":"语义化版本"},"headers":[],"relativePath":"note/semver/index.md","filePath":"note/semver/index.md","lastUpdated":null}'),d={name:"note/semver/index.md"};function t(c,e,r,s,n,h){return i(),o("div",null,e[0]||(e[0]=[l('<blockquote><p>作者: 小王 ✌️👀✌️</p></blockquote><h1 id="语义化版本" tabindex="-1">语义化版本 <a class="header-anchor" href="#语义化版本" aria-label="Permalink to &quot;语义化版本&quot;">​</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>用于软件版本管理的一组规则和约束条件</p><h2 id="格式" tabindex="-1">格式 <a class="header-anchor" href="#格式" aria-label="Permalink to &quot;格式&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>主版本号.次版本号.修订号-先行版本号+元数据</span></span></code></pre></div><p>其中, 先行版本号和元素据是由<code>.</code>分隔的一组标识符</p><p>例如: <code>4.2.2</code>, <code>4.2.2-stable</code>, <code>4.3.0-beta.1+build.2</code></p><h2 id="版本号排序规则" tabindex="-1">版本号排序规则 <a class="header-anchor" href="#版本号排序规则" aria-label="Permalink to &quot;版本号排序规则&quot;">​</a></h2><p>各个版本号之间是存在排序的,排序规则如下:</p><ul><li>主版本号的权重&gt;次版本号的权重&gt;修订号权重, 例如<code>1.0.1</code> &gt; <code>1.0.0</code></li><li>先行版本号通常小于对应的普通版本, 例如, 例如<code>1.0.0</code> &gt; <code>1.0.0-beta</code></li><li>元数据不影响排序, 例如<code>1.0.0-beta</code> = <code>1.0.0-beta:build32</code></li></ul><h2 id="版本递增规则" tabindex="-1">版本递增规则 <a class="header-anchor" href="#版本递增规则" aria-label="Permalink to &quot;版本递增规则&quot;">​</a></h2><ol><li><code>主版本号major</code>: 做了不兼容的API修改, 例如某个类或方法的使用方式发生变化</li><li><code>次版本号minor</code>: 做了向下兼容的功能性新增</li><li><code>修订号patch</code>: 做了向下兼容的问题修正, 例如修复bug</li></ol><h2 id="具体细节" tabindex="-1">具体细节 <a class="header-anchor" href="#具体细节" aria-label="Permalink to &quot;具体细节&quot;">​</a></h2><ul><li>版本号格式<code>x.y.z</code>, x, y, z必须为非负整数</li><li>标记了版本号的软件发行后, 任何修改都必须以新的版本号再次发行</li><li>1.0.0的版本号用于界定公共API的形成。这一版本之后所有的版本号更新都基于公共API及其修改内容</li><li>主版本号为零的软件处于开发初始阶段, 不应该被视为稳定版, 即不应作为公共API</li><li>次版本号递增时, 修订号必须归零;主版本号递增时, 次版本号和修订号必须归零</li></ul><h3 id="常见先行版本号" tabindex="-1">常见先行版本号 <a class="header-anchor" href="#常见先行版本号" aria-label="Permalink to &quot;常见先行版本号&quot;">​</a></h3><ul><li><code>dev</code></li><li><code>alpha</code></li><li><code>beta</code></li><li><code>rc</code></li><li><code>stable</code></li></ul><h3 id="常见元数据" tabindex="-1">常见元数据 <a class="header-anchor" href="#常见元数据" aria-label="Permalink to &quot;常见元数据&quot;">​</a></h3><p>元数据可以是软件开发团队自定义的, 通常情况:</p><ul><li>构建编号: 提交次数, 例如<code>1.0.0+build.123</code>表示该版本是第123次构建</li><li>提交hash: git中对应提交的hash, 例如<code>1.0.0+commit.abc123</code></li><li>时间戳: 例如<code>1.0.0+20231115</code> 表示版本构建于 2023 年 11 月 15 日</li><li>构建环境: 例如<code>1.0.0+server01</code>表示该版本是在服务器<code>server01</code>上构建的</li></ul>',20)]))}const b=a(d,[["render",t]]);export{p as __pageData,b as default};
