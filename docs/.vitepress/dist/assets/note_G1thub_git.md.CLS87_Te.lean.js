import{_ as e,c as t,a2 as s,o as i}from"./chunks/framework.DX8ksQZH.js";const l="/assets/image-20230405163400253.CxsQtzKn.png",u=JSON.parse('{"title":"git","description":"","frontmatter":{"title":"git","outline":"deep"},"headers":[],"relativePath":"note/G1thub/git.md","filePath":"note/G1thub/git.md","lastUpdated":1729326578000}'),n={name:"note/G1thub/git.md"};function o(p,a,h,d,c,r){return i(),t("div",null,a[0]||(a[0]=[s('<h1 id="hello-git" tabindex="-1">hello,git <a class="header-anchor" href="#hello-git" aria-label="Permalink to &quot;hello,git&quot;">​</a></h1><blockquote><p>作者: 小王</p><p>状态: 稳定</p><p>✌️👀✌️</p></blockquote><h2 id="版本控制工具" tabindex="-1">版本控制工具 <a class="header-anchor" href="#版本控制工具" aria-label="Permalink to &quot;版本控制工具&quot;">​</a></h2><p>版本控制工具分为集中式和分布式</p><p>集中式: 中央服务器,所有人从中央服务器获取和上传代码,缺点是当中央服务器的单点故障时,代码无法被提交</p><p>分布式: 与集中式的区别在于, 除了中央服务器外, 每个人在自己的机器上维护一个本地服务器, 本地服务器与中央服务器同步,这样即使中央服务器出现故障, 仍然可以在本地进行版本控制</p><p><strong>git为分布式版本控制工具</strong></p><h2 id="git工作机制" tabindex="-1">git工作机制 <a class="header-anchor" href="#git工作机制" aria-label="Permalink to &quot;git工作机制&quot;">​</a></h2><ul><li><p><strong>工作区</strong> 项目在本地磁盘上的位置</p></li><li><p><strong>暂存区</strong> 通过<code>git add</code>命令将工作区项目添加到暂存区</p></li><li><p><strong>本地库</strong> 通过<code>git commit</code>命令将暂存区项目提交到本地库,生成历史版本</p></li><li><p><strong>远程库</strong>(代码托管中心) 通过<code>git push</code>命令将本地库项目推送到远程库</p><ul><li>局域网远程库 <ul><li>GitLab</li></ul></li><li>互联网远程库 <ul><li>GitHub</li><li>Gitee</li></ul></li></ul></li></ul><h1 id="常用命令" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令" aria-label="Permalink to &quot;常用命令&quot;">​</a></h1><p><img src="'+l+`" alt="image-20230405163400253" loading="lazy"></p><h2 id="用户签名" tabindex="-1">用户签名 <a class="header-anchor" href="#用户签名" aria-label="Permalink to &quot;用户签名&quot;">​</a></h2><p>设置用户签名和邮箱(必须配置,只代表本地)</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git config --global user.name origin</span></span>
<span class="line"><span>git config --global user.email 1223003136@qq.com</span></span></code></pre></div><h2 id="初始化本地库" tabindex="-1">初始化本地库 <a class="header-anchor" href="#初始化本地库" aria-label="Permalink to &quot;初始化本地库&quot;">​</a></h2><p>在项目根目录下执行已下命令,生成.git文件</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span></span></code></pre></div><h2 id="查看本地库状态" tabindex="-1">查看本地库状态 <a class="header-anchor" href="#查看本地库状态" aria-label="Permalink to &quot;查看本地库状态&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> status</span></span></code></pre></div><h2 id="添加暂存区" tabindex="-1">添加暂存区 <a class="header-anchor" href="#添加暂存区" aria-label="Permalink to &quot;添加暂存区&quot;">​</a></h2><p>将工作区中的文件添加至暂存区</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git add Hello.txt</span></span></code></pre></div><p>暂存区的文件可以被删除</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git rm --cache Hello.txt</span></span></code></pre></div><h2 id="提交本地库" tabindex="-1">提交本地库 <a class="header-anchor" href="#提交本地库" aria-label="Permalink to &quot;提交本地库&quot;">​</a></h2><p>将暂存区的文件提交到本地库,-m后指定日志信息</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git commit -m &quot;first commit&quot; Hello.txt</span></span></code></pre></div><h2 id="历史版本" tabindex="-1">历史版本 <a class="header-anchor" href="#历史版本" aria-label="Permalink to &quot;历史版本&quot;">​</a></h2><p>查看历史版本</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git reflog 查看版本信息</span></span>
<span class="line"><span>git log 查看版本详细信息</span></span></code></pre></div><p>版本穿梭,参数为版本号</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git reset --hard af139a4</span></span></code></pre></div><h1 id="分支" tabindex="-1">分支 <a class="header-anchor" href="#分支" aria-label="Permalink to &quot;分支&quot;">​</a></h1><h2 id="查看分支" tabindex="-1">查看分支 <a class="header-anchor" href="#查看分支" aria-label="Permalink to &quot;查看分支&quot;">​</a></h2><p>查看分支,-v查看版本</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git branch -v</span></span></code></pre></div><h2 id="添加分支" tabindex="-1">添加分支 <a class="header-anchor" href="#添加分支" aria-label="Permalink to &quot;添加分支&quot;">​</a></h2><p>新增hot-fix分支</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git branch hot-fix</span></span></code></pre></div><h2 id="切换分支" tabindex="-1">切换分支 <a class="header-anchor" href="#切换分支" aria-label="Permalink to &quot;切换分支&quot;">​</a></h2><p>切换到hot-fix分支</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git checkout hot-fix</span></span></code></pre></div><h2 id="分支合并" tabindex="-1">分支合并 <a class="header-anchor" href="#分支合并" aria-label="Permalink to &quot;分支合并&quot;">​</a></h2><p>将hot-fix分支合并到当前分支中</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git merge hot-fix</span></span></code></pre></div><h2 id="冲突合并" tabindex="-1">冲突合并 <a class="header-anchor" href="#冲突合并" aria-label="Permalink to &quot;冲突合并&quot;">​</a></h2><p>合并分支时,如果两个分支对同一个文件同时做了修改,那么git就无法确定到底使用哪个分支的修改,此时就会进入合并中状态<code>(master|MERGING)</code></p><p>我们需要在合并中状态下进入有冲突的文件,修改文件内容并add,commit,即可完成合并</p><p>注意: 合并中状态下使用commit命令无需指定文件名</p><h1 id="github" tabindex="-1">github <a class="header-anchor" href="#github" aria-label="Permalink to &quot;github&quot;">​</a></h1><h2 id="远程库别名" tabindex="-1">远程库别名 <a class="header-anchor" href="#远程库别名" aria-label="Permalink to &quot;远程库别名&quot;">​</a></h2><p>给远程库创建别名<code>git-demo</code> 链接为github远程库链接</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git remote add git-demo https://github.com/Wild-Hearts/git-demo.git</span></span></code></pre></div><h2 id="推送远程库" tabindex="-1">推送远程库 <a class="header-anchor" href="#推送远程库" aria-label="Permalink to &quot;推送远程库&quot;">​</a></h2><p>将本地库项目的master分支推送到别名为git-demo的远程库</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git push git-demo master</span></span></code></pre></div><h2 id="拉取远程库到本地" tabindex="-1">拉取远程库到本地 <a class="header-anchor" href="#拉取远程库到本地" aria-label="Permalink to &quot;拉取远程库到本地&quot;">​</a></h2><p>拉取别名为git-demo的远程库的master分支上的项目到本地库中</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git pull git-demo master</span></span></code></pre></div><h2 id="克隆" tabindex="-1">克隆 <a class="header-anchor" href="#克隆" aria-label="Permalink to &quot;克隆&quot;">​</a></h2><p>克隆会做如下操作:拉取代码,初始化本地库,创建别名</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git clone https://github.com/Wild-Hearts/git-demo.git</span></span></code></pre></div>`,62)]))}const b=e(n,[["render",o]]);export{u as __pageData,b as default};
