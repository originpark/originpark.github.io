import{_ as a,c as t,a2 as i,o as s}from"./chunks/framework.DX8ksQZH.js";const o="/assets/image-20241010185209914.BW473hwW.png",c="/assets/image-20241010175923099.UcKJFDyk.png",m=JSON.parse('{"title":"github","description":"","frontmatter":{"title":"github","outline":"deep"},"headers":[],"relativePath":"note/G1thub/github.md","filePath":"note/G1thub/github.md","lastUpdated":1729326578000}'),d={name:"note/G1thub/github.md"};function p(n,e,l,r,g,u){return s(),t("div",null,e[0]||(e[0]=[i(`<h1 id="github工作流" tabindex="-1">Github工作流 <a class="header-anchor" href="#github工作流" aria-label="Permalink to &quot;Github工作流&quot;">​</a></h1><blockquote><p>作者: 小王</p><p>状态: 稳定</p><p>✌️👀✌️</p></blockquote><h2 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h2><p>三个基本对象:</p><ul><li><code>Remote</code>: github远程仓库上的main分支</li><li><code>Local</code>: 本地git仓库</li><li><code>Disk</code>: 本地磁盘</li></ul><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><ol><li><p>将remote的main分支clone到本地</p><div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git clone xxx.git</span></span></code></pre></div></li><li><p>创建一个新的分支<code>my-feature</code>,切换到<code>my-feature</code>分支,此时: <code>my-freture</code>分支和<code>main</code>分支内容相同,磁盘上保存的是<code>my-feature</code>分支代码</p><div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git checkout -b my-feature</span></span></code></pre></div><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><p><code>checkout</code>表示切换到某个分支, 添加<code>-b</code>参数表示创建新的分支并切换</p></div></li><li><p>在磁盘上进行工作(changes), 完成之后使用<code>add</code>, <code>commit</code>将代码提交到<code>my-feature</code>分支</p><div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git diff</span></span>
<span class="line"><span>git add .</span></span>
<span class="line"><span>git commit -m &quot;f-commit&quot;</span></span></code></pre></div></li><li><p>将<code>my-feature</code>分支推送到<code>remote</code>的<code>my-feature</code>分支</p><div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git push origin my-feature</span></span></code></pre></div><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><p><strong>origin</strong>: 使用<code>git clone</code>后,会默认设置该远程仓库别名为<code>origin</code></p></div></li><li><p>此时<code>remote</code>的<code>main</code>分支很可能相较于我们之前<code>clone</code>下来的<code>main</code>已经有了变化(其他人的提交),因此需要先在本地切换到<code>main</code>分支, 然后将<code>remote</code>最新的<code>main</code>分支拉取到本地</p><div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git checkout main</span></span>
<span class="line"><span>git pull origin main</span></span></code></pre></div></li><li><p>接下来切换到<code>my-feature</code>分支, 使用<code>rebase</code>合并本地的<code>my-feature</code>和<code>main</code></p><div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git rebase main</span></span></code></pre></div></li><li><p>将本地<code>my-feature</code>分支推送到<code>remote</code>的<code>my-feature</code>分支</p><div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git push -f origin my-feature</span></span></code></pre></div></li><li><p>执行<code>pull request</code>操作,即<code>remote</code>的<code>main</code>分支拉取其他分支的更新</p><div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git merge --squash my-feature</span></span></code></pre></div><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><p><strong>squash</strong>: 表示<code>merge</code>时将<code>my-feature</code>所有的提交合并成一个提交,保证<code>main</code>分支的历史提交简洁且可用</p></div></li><li><p><code>remote</code>端删除<code>my-feature</code>分支,本地切换到<code>main</code>分支, 删除本地<code>my-feature</code>分支, 重新拉取<code>remote</code>的<code>main</code>分支到本地</p></li></ol><h2 id="补充-merge和rebase" tabindex="-1">补充-merge和rebase <a class="header-anchor" href="#补充-merge和rebase" aria-label="Permalink to &quot;补充-merge和rebase&quot;">​</a></h2><p><strong>merge</strong>:</p><img src="`+o+'" alt="image-20241010185209914" style="zoom:67%;margin-left:0;"><p><strong>rebase</strong>:</p><img src="'+c+'" alt="image-20241010175923099" style="zoom:50%;margin-left:0;">',12)]))}const b=a(d,[["render",p]]);export{m as __pageData,b as default};
